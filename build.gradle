import org.apache.commons.codec.digest.DigestUtils

apply plugin: 'base'

buildDir = 'target'
version = buildVersion
group = "com.cmates.site"
description = "Bootstrap build and documentation for DPL."

buildscript {
    apply plugin: "maven"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "commons-codec:commons-codec:1.8"
    }
}

ext {
    artifactId = "uiarchitecturebb"
    tarballName = "${artifactId}-${version}"
}

defaultTasks 'assemble'
tasks.assemble.dependsOn 'bundle'

task bundle (dependsOn: ['copyBuild', 'copyBambooProps', 'buildProps'], type: Tar) {
    description = "Creates the final tar.gz archive"
    compression = Compression.GZIP
    baseName = artifactId
    extension = "tar.gz"
    destinationDir buildDir

    from("${buildDir}/${tarballName}") {
        into tarballName
    }
}

task buildProps(dependsOn: ['createWorkingDirectories'], type: Copy) {
    from('build') {
        include "*.spec"
    }

    into(buildDir)
    expand(project.properties)
}

task copyBambooProps(dependsOn: ['createWorkingDirectories'], type: Copy) {
    from 'bamboo.build.properties'
    into (buildDir)
}

task copyBuild(dependsOn: ['emberBuild'], type: Copy) {
    from("${buildDir}/tmp/dist") {
        include '**'
    }
    into("${buildDir}/${tarballName}")
}

task copyApplication(type: Copy) {
    from('.') {
        include '**/*'
        exclude 'node_modules'
        exclude 'bower_components'
        exclude 'target/**'
        exclude 'tmp/**'
    }
    into("${buildDir}/tmp")
}

task npmInstall(dependsOn: ['copyApplication'], type: Exec) {
    workingDir = "${buildDir}/tmp"
    commandLine 'npm', 'install'
    outputs.dir  "/node_modules"
}

task bowerInstall(dependsOn: ['npmInstall'], type: Exec) {
    workingDir = "${buildDir}/tmp"
    commandLine "bower", 'install'
    outputs.dir  "/bower_components"
}

task emberBuild(dependsOn: ['bowerInstall'], type: Exec) {
    workingDir = "${buildDir}/tmp"
    commandLine "node_modules/ember-cli/bin/ember", "build", "--environment=production"
    outputs.dir "/dist"
}

task createWorkingDirectories {
    outputs.file(file("${buildDir}/${tarballName}"))

    doLast {
        file("${buildDir}/${tarballName}").mkdirs()
    }
}

/*
jshint {
    // Depends on our generation task
    tasks.jshint.dependsOn 'npmInstallProduction'

    // This plugin has a weird naming issue (http://forums.gradle.org/gradle/topics/gradle_js_plugin)
    // Prefixing config with tasks.jshint seems to fix it.
    tasks.jshint.source = fileTree(dir: "${buildDir}/${tarballName}", include: ["lib/*.js", "rest/*.js", "server.js"])
    tasks.jshint.dest = file("${buildDir}/jshint.out")
    tasks.jshint.outputToStdOut = true
    tasks.jshint.ignoreExitCode = false

    jshint.options = [
        expr: "true",
        unused: "true",
        shadow: "true",
        eqeqeq: "true"
    ]
}*/

// This task gets the gradlew scripts and the jar file for us.
// Use this to upgrade gradle versions.
task createWrapper(type: Wrapper) {
    gradleVersion = '1.10'
}
